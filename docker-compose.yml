services:
  db:
    image: postgres:15
    container_name: grocery_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      PGUSER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build: .
    container_name: grocery_app
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  test_api:
    build: .
    container_name: test_app
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=${TEST_DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    
  k6:
    image: grafana/k6:latest
    command: run /tests/load-test.js
    volumes:
      - ./tests:/tests
    depends_on:
      - test_api
    environment:
      - BASE_URL=http://test_api:8000

  k6-cleanup:
    image: postgres:15
    command: >
      sh -c "
      psql -h db -U $$POSTGRES_USER -d postgres -c \"SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'grocery_inventory_test' AND pid <> pg_backend_pid();\" &&
      psql -h db -U $$POSTGRES_USER -d postgres -c 'DROP DATABASE IF EXISTS grocery_inventory_test;' &&
      psql -h db -U $$POSTGRES_USER -d postgres -c 'CREATE DATABASE grocery_inventory_test;'
      "
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - db

volumes:
  postgres_data: