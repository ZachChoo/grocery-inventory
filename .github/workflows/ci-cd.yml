name: Grocery Inventory CI/CD

on:
  # Run on every push to main branch
  push:
    branches: [ main ]
  # Run on every pull request to main branch
  pull_request:
    branches: [ main ]

# TEST environment used for temporary test databases in CI
env:
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  POSTGRES_DB: test_grocery_inventory

jobs:
  # JOB 1: Run tests and code quality checks
  test:
    name: Run Tests & Code Quality
    runs-on: ubuntu-latest
    
    # Start a PostgreSQL service for testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        # Wait for postgres to be ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    # Step 1: Get code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up Python
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Step 3: Cache dependencies to speed up future runs
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Step 4: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 5: Run linting
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings, ignore annoying whitespace rules
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --ignore=W293,E302 --statistics

    # Step 6: Run tests with coverage
    - name: Run tests with pytest
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        TEST_DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html

    # Step 7: Upload test coverage to see how much of our code is tested
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests

  # JOB 2: Build and push Docker image (only on main branch)
  build-and-deploy:
    name: Build & Deploy Docker Image
    needs: test  # Only run this job if tests pass
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    # Step 1: Get our code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Step 3: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Generate metadata for Docker image
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/grocery-inventory
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    # Step 5: Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Step 6: Deploy notification
    - name: Deployment notification
      run: |
        echo "Docker image built and pushed successfully!"
        echo "Image tags: ${{ steps.meta.outputs.tags }}"